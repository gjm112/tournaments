---
title: "fix rr"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

# Fix Round Robin Code

### reference: strength weights

```{r}
num <- 4

# uniform 
qunif(1:num/(num+1), 0, num+1)

# normal
qnorm(((1:num) - 0.5) / num, 0, 1)
```

# Set Up

simulate one match

```{r}
library(tidyverse)

simulate_match <- function(team1, team2, strengths) {
  strength1 <- strengths$True_Strength[strengths$Team == team1]
  strength2 <- strengths$True_Strength[strengths$Team == team2]
  
  prob_team1_wins <- exp(strength1-strength2) / (1 + exp(strength1 - strength2))
  
  winner <- ifelse(runif(1) < prob_team1_wins, team1, team2)
  return(winner)
}
```

round robin tournament function for n rounds

```{r}
simulate_roundrobin_r <- function(teams, strengths, r){
  n <- length(teams)
  win_counts <- numeric(n)
  for (i in 1:r){
    for (i in seq_along(teams)){
      for (j in seq_along(teams)){
        if (i != j){
          match_winner <- simulate_match(teams[i],teams[j],strengths)
          if (match_winner == teams[i]) {
            win_counts[i] <- win_counts[i] + 1
          } else {
            win_counts[j] <- win_counts[j] + 1
          }
        }
      }
    }
  }
  results <- data.frame(
    Team = teams,
    Game_Wins = win_counts
  )
  
  # Ranks teams based on number of wins (includes ties)
  results$Rank_Hat <- rank(-results$Game_Wins, ties.method = "average")
  results <- results[order(results$Rank_Hat),]
  
  results <- results %>% inner_join(strengths, by = 'Team') %>% select(Team, True_Rank, True_Strength, Rank_Hat, Game_Wins)
  
  return(results)
}
```


## Uniform Distribution of Strengths

run tournament for n rounds

# Saving Output in Different Way

- have code to simulate one match, round robin tournament for n rounds

- just need to fix run_tournament function to save output differently?

## Uniform Dist, Save Each Sim

```{r}
run_tournament <- function(num_teams, num_rounds){
  # define teams
  teams <- paste("Team", 1:num_teams)
  # put Teams and True_Strength into data frame
  team_strengths <- data.frame(
    Team = teams,
    True_Strength = qunif(1:num_teams/(num_teams+1), 0, sqrt(12)))
  
  # add True_Rank and Seed, order columns
  team_strengths <- team_strengths %>% arrange(-True_Strength) %>% mutate(True_Rank = row_number()) %>% arrange(Team) %>% mutate(Seed = NA) %>% select(Team, True_Rank, True_Strength, Seed)
  
  
  # simulation set up
  n <- 1000
  total_ranks <- data.frame(matrix(NA, nrow = n, ncol = length(teams)))
  colnames(total_ranks) <- teams
  
  kendallcor <- c()
  spearmancor <- c()
  
  ####### new object to save all of the simulations
  simulation_list <- list()
  
  
  # run multiple simulations
  for (i in 1:n) {
    simulation_list[[i]] <- simulate_roundrobin_r(teams, team_strengths, num_rounds) 
    
    
    ranks <- simulation_list[[i]]$Rank_Hat
    team_order <- simulation_list[[i]]$Team
    total_ranks[i, team_order] <- ranks
    
    kendallcor[i] <- cor(simulation_list[[i]]$Rank_Hat, simulation_list[[i]]$True_Rank, method="kendall")
    spearmancor[i] <- cor(simulation_list[[i]]$Rank_Hat, simulation_list[[i]]$True_Rank, method="spearman")
  }
  
  # SUMMARY - Calculate average ranks for each team
  average_ranks <- data.frame(AvgRankHat = colMeans(total_ranks, na.rm = TRUE), Strength = team_strengths$True_Strength, Rank = team_strengths$True_Rank)
  
  # remove NA correlation values
  kendallcor <- na.omit(kendallcor)
  spearmancor <- na.omit(spearmancor)
  
  # kendall and spearman correlations
  k_mean <- mean(kendallcor)
  s_mean <- mean(spearmancor)
  
  results <- list(average_ranks = average_ranks, k_mean = k_mean, s_mean = s_mean, simulation_list = simulation_list)
  
  return(results)
}
```

### Run the simulation

```{r}
# run simulation using run_tournament() 
  # inputs are number of teams and number of rounds
results <- run_tournament(8, 1)
sims <- results$simulation_list

results
```

- run 1000 simulations for different numbers of teams
  - uniform and normal distributions for strengths
  - 3-8 teams, 16 teams
  
- save them as list objects
